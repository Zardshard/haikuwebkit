
PASS Initial iceConnectionState should be new
PASS Closing the connection should set iceConnectionState to closed
PASS connection with one data channel should eventually have connected or completed connection state
FAIL connection with one data channel should eventually have connected connection state assert_equals: Expect ICE transport to be in checking state when iceConnectionState is checking expected "checking" but got "new"
PASS connection with audio track should eventually have connected connection state
PASS connection with audio and video tracks should eventually have connected connection state
PASS ICE can connect in a recvonly usecase
FAIL iceConnectionState changes at the right time, with bundle policy balanced assert_equals: PC.iceConnectionState: expected "connected" but got "checking"
PASS iceConnectionState changes at the right time, with bundle policy max-bundle
FAIL iceConnectionState changes at the right time, with bundle policy max-compat assert_equals: PC.iceConnectionState: expected "connected" but got "checking"
PASS Responder ICE connection state behaves as expected
PASS Closing a PeerConnection should not fire iceconnectionstatechange event

